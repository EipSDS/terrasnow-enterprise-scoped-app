<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <client_script><![CDATA[function ($rootScope, $scope, spUtil, $location) {
	var c = this;
	$scope.$on('view_changed', function(e,info) {
		c.data.terraformDatatableWidget = null;
		c.server.update().then(function(){
		});
	});
	var blueprint = $location.search().blueprint;
	var error = $location.search().error;
	// Breadcrumbs

	if(blueprint){
		var name = '';
		if(blueprint == 'null')
			name = "Discovered Stacks";
		else
			name = blueprint;
		var bc = [{label: "Cloud Stacks", url: '?id=cloud_stacks&category=cloud_stacks&table=x_terraform_snow_deployments'}];
		bc[bc.length] = {label: name, url: '#'};
	}
	else if(error)
	{
		var bc = [{label: "Cloud Stacks", url: '?id=cloud_stacks&category=cloud_stacks&table=x_terraform_snow_deployments'}];
		bc[bc.length] = {label: "Stacks with Issues", url: '#'};

	}
	else
		var bc = [{label: "Cloud Stacks", url: '?id=cloud_stacks&category=cloud_stacks&table=x_terraform_snow_deployments'}];

	$rootScope.$broadcast('sp.update.breadcrumbs', bc);
	spUtil.setSearchPage('sc');

	var unsub = $rootScope.$on('cloudStacksEvent', function(e,info) {
		$location.url(info.url).search('spa', '1').replace();
		c.data.terraformDatatableWidget = null;

		var blueprint = $location.search().blueprint;
		var error = $location.search().error;
		// Breadcrumbs

		if(blueprint){
			var name = '';
			if(blueprint == 'null')
				name = "Discovered Stacks";
			else
				name = blueprint;
			var bc = [{label: "Cloud Stacks", url: '?id=cloud_stacks&category=cloud_stacks&table=x_terraform_snow_deployments'}];
			bc[bc.length] = {label: name, url: '#'};
		}
		else if(error)
		{
			var bc = [{label: "Cloud Stacks", url: '?id=cloud_stacks&category=cloud_stacks&table=x_terraform_snow_deployments'}];
			bc[bc.length] = {label: "Stacks with Issues", url: '#'};

		}	
		else
			var bc = [{label: "Cloud Stacks", url: '?id=cloud_stacks&category=cloud_stacks&table=x_terraform_snow_deployments'}];

		$rootScope.$broadcast('sp.update.breadcrumbs', bc);
		spUtil.setSearchPage('sc');
		c.server.update().then(function(){
			//bc = [{label: "Cloud Stacks", url: '?id=cloud_stacks&category=cloud_stacks&table=x_terraform_snow_deployments'}];
		});
	});

	$scope.$on('$destroy', function(){
		unsub();
	});

	$scope.$on('data_table.click', function(e, parms){
		var p = $scope.data.page_id || 'cloud_stack_details';
		var s = {id: p,category:"cloud_stacks",sys_id: parms.sys_id};
		$location.search(s).search('spa', '1').replace();
	});
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.table-container {&#13;
	border: 1px solid #dee5e7;&#13;
  border-radius: 4px;&#13;
  box-shadow: 0 1px 1px rgba(0, 0, 0, .05);"&#13;
}</css>
        <data_table>sp_instance_table</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>title,table,filter,maximum_entries,order_direction,glyph,field_list,color,order_by,sp_page</field_list>
        <has_preview>false</has_preview>
        <id/>
        <internal>false</internal>
        <link/>
        <name>Terraform Deployments Datatable Instance</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function(){
	data.myCIs = [];
	data.err_stacks =[];
	//data.gv = gs.getUser().getPreference('terraform_user_portal_view')|| 'mine';
	data.gv = gs.getUser().getPreference('terraform_user_portal_view')|| 'Default View';
	data.is_admin = false ;

	var gr2 = new GlideRecord('sys_user_has_role');
	gr2.addQuery('user',gs.getUserID());
	gr2.addEncodedQuery('role.name=admin^ORrole.name=sn_cmp.cmp_root_admin');
	gr2.query();
	if(gr2.next()){
		data.is_admin = true;
	}

	getTableWidget();

	function getTableWidget(){
		data.group_ids = []; 
		var grm_rec = new GlideRecord('sys_user_grmember');  
		grm_rec.addQuery('user',gs.getUserID());  
		grm_rec.query();  
		while(grm_rec.next()){  
			data.group_ids.push(grm_rec.group.sys_id);  
		}
		//gs.addInfoMessage("user group_ids: " + data.group_ids);

		$sp.getValues(data);
		if (data.field_list) {
			data.fields_array = data.field_list.split(',');
			gs.addInfoMessage("field array: " + data.fields_array);
		} else {
			data.field_list = $sp.getListColumns(data.table);
			gs.addInfoMessage("field list: " + data.field_list);
		}
		gs.addInfoMessage('$sp.getParameter(\'table\'):' + $sp.getParameter('table'));
		data.table = $sp.getParameter('table') || 'x_terraform_snow_deployments';
		data.view = $sp.getParameter('view');
		if (!data.table) {
			data.invalid_table = true;
			data.table_label = "";
			return;
		}

		var gr = new GlideRecordSecure(data.table);
		if (!gr.isValid()) {
			data.invalid_table = true;
			data.table_label = data.table;
			return;
		}

		if($sp.getParameter('blueprint') == undefined && $sp.getParameter('error') == undefined)
		{
			if(data.gv == 'mine'){
				data.filter = "assigned_to="+ gs.getUserID();
			}
			else if(data.gv == 'group'){
				data.filter = "assigned_to="+ gs.getUserID()+"^ORowner_groupIN"+data.group_ids.join(',');
			}
			else if(data.is_admin && data.gv == 'all'){
				data.filter = '';
			}
			data.title = "All Stacks";
		}
		else if($sp.getParameter('blueprint') == undefined && $sp.getParameter('error') == "true") {

	//		var inc = new GlideRecord("incident");
	//		inc.addQuery("category","cloud_management");
			
	//		if(data.gv == 'mine'){
	//			inc.addEncodedQuery("caller_id="+gs.getUserID()+"^ORcmdb_ci.assigned_to="+gs.getUserID());
	//		}
	//		else if(data.gv == 'group'){
	//			inc.addEncodedQuery("caller_id="+gs.getUserID()+"^ORcmdb_ci.assigned_to="+gs.getUserID()+"^ORcmdb_ci.assignment_groupIN"+data.group_ids.join(',')+"^ORcmdb_ci.ref_sn_cmp_stack.owner_groupIN"+data.group_ids.join(','));
	//		}
			
	//		inc.addQuery("cmdb_ci.sys_class_name",'sn_cmp_stack');
	//		inc.addQuery("state",'IN',"1,2,3");
	//		inc.query();
	//		while(inc.next()){
	//			data.err_stacks.push(inc.getValue("cmdb_ci"))
	//		}

			var stack_items = new GlideRecord("x_terraform_snow_deployments");
			if(data.gv == 'mine'){
				stack_items.addEncodedQuery("deployed_by="+ gs.getUserID());
			}
			else if(data.gv == 'group'){
				stack_items.addEncodedQuery("deployed_by="+ gs.getUserID()+"^ORowner_groupIN"+data.group_ids.join(','));
			}
			
	//		stack_items.addQuery('stack.sys_id', 'NOT IN', data.err_stacks.join(','));
	//		stack_items.addQuery("stack.stack_status","2");
	//		stack_items.addEncodedQuery("ci_instance_idISNOTEMPTY");
	//		var qc = stack_items.addQuery("ci_instance_id.ref_cmdb_ci_vm_instance.state","terminated"); 
	//		qc.addOrCondition("ci_instance_id.ref_cmdb_ci_cloud_subnet.state","terminated");
	//		qc.addOrCondition("ci_instance_id.ref_cmdb_ci_network.state","terminated");
	//		qc.addOrCondition("ci_instance_id.ref_cmdb_ci_router.state","terminated");
	//		qc.addOrCondition("ci_instance_id.ref_cmdb_ci_storage_volume.state","terminated");
	//		qc.addOrCondition("ci_instance_id.ref_cmdb_ci_internet_gateway.state","terminated");
	//		qc.addOrCondition("ci_instance_id.ref_cmdb_ci_cloud_load_balancer.state","terminated");
	//		stack_items.query();
	//		while(stack_items.next()){
	//			if(data.err_stacks.indexOf(stack_items.stack.sys_id.toString())< 0){
	//				data.err_stacks.push(stack_items.stack.sys_id);
  //
	//			}
	//		}
			//	}
			data.filter = "sys_idIN"+data.err_stacks.join(',');
			data.title = "Stacks with Issues";
		}
		else
		{
			if(data.gv == 'mine'){
				data.filter ='blueprint.name='+ $sp.getParameter('blueprint') +'^assigned_to=' + gs.getUserID();
			}
			else if(data.gv == 'group'){
				data.filter ='blueprint.name='+ $sp.getParameter('blueprint') +'^assigned_to=' + gs.getUserID()+"^ORowner_groupIN"+data.group_ids.join(',');
			}
			else if(data.is_admin && data.gv == 'all'){
				data.filter = data.filter ='blueprint.name='+ $sp.getParameter('blueprint') ;
			}
			data.title = $sp.getParameter('blueprint');
		}
		data.table_label = gr.getLabel();
		data.fields = data.field_list;
		//data.title = gr.getED().getPlural(); //gr.getPlural();
		copyParameters(data, ['p', 'o', 'd']);
		copyParameters(data, ['relationship_id', 'apply_to', 'apply_to_sys_id']);
		data.show_keywords  = false;
		data.show_breadcrumbs = false;
		data.show_new = false;

		data.terraformDatatableWidget = $sp.getWidget('terraform-datatable', data);

	}


	function copyParameters(to, names) {
		names.forEach(function(name) {
			data[name] = $sp.getParameter(name);
		});
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>adm.taylor.c.mulder</sys_created_by>
        <sys_created_on>2018-08-22 17:18:46</sys_created_on>
        <sys_id>36617306bd802300777f33de98a8ac45</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>Terraform Deployments Datatable Instance</sys_name>
        <sys_package display_value="terraform-snow" source="x_terraform_snow">e4a2adf774241300777ff5c38bfe8185</sys_package>
        <sys_policy/>
        <sys_scope display_value="terraform-snow">e4a2adf774241300777ff5c38bfe8185</sys_scope>
        <sys_update_name>sp_widget_36617306bd802300777f33de98a8ac45</sys_update_name>
        <sys_updated_by>adm.taylor.c.mulder</sys_updated_by>
        <sys_updated_on>2018-08-23 20:50:18</sys_updated_on>
        <template><![CDATA[<div ng-if="data.terraformDatatableWidget">
  <sp-widget widget="data.terraformDatatableWidget"></sp-widget>
</div>]]></template>
    </sp_widget>
</record_update>
